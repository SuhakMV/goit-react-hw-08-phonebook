{"version":3,"file":"static/js/219.aa5e35cf.chunk.js","mappings":"yMACA,EAAuB,4BAAvB,EAA2D,6B,SCG9CA,EAAgB,WAC3B,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,0BACE,iBAAMC,UAAWC,EAAjB,UACE,mBAAOD,UAAWC,EAAlB,oCAEE,kBAAOC,KAAK,OAAOC,SATJ,SAAAC,GACrBN,GAASO,EAAAA,EAAAA,IAAUD,EAAEE,OAAOC,OAC7B,UAYF,E,SCrBYC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAnB,EAErBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,MAAnB,EAEpBC,EAAoB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,ECHtC,EAAuB,0BAAvB,EAAyD,2BCI5CC,EAAc,WACzB,IAAMD,GAAQE,EAAAA,EAAAA,IAAYH,GACpBhB,GAAWC,EAAAA,EAAAA,MAoBjB,OACE,kBAAMC,UAAWC,EAAUiB,SAnBR,SAAAd,GACnBA,EAAEe,iBACF,IAAMC,EAAOhB,EAAEiB,cACfN,EAAMO,SAAQ,SAAAC,GACRA,EAAKC,KAAKC,gBAAkBL,EAAKM,SAASF,KAAKjB,MAAMkB,cACvDE,MAAM,GAAD,OAAIP,EAAKM,SAASF,KAAKjB,MAAvB,6BAELT,GACE8B,EAAAA,EAAAA,IAAW,CACTJ,KAAMJ,EAAKM,SAASF,KAAKjB,MACzBsB,OAAQT,EAAKM,SAASG,OAAOtB,SAGjCa,EAAKU,QAER,GACF,EAGoDC,aAAa,MAAhE,WACE,mBAAO/B,UAAWC,EAAlB,kBAEE,kBACEC,KAAK,OACLsB,KAAK,OACLQ,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOlC,UAAWC,EAAlB,oBAEE,kBACEC,KAAK,OACLsB,KAAK,SACLQ,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQhC,KAAK,SAAb,4BAGL,ECnDD,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAyF,wBCG5EiC,EAAU,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIZ,EAAmB,EAAnBA,KAAMK,EAAa,EAAbA,OAC5B/B,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKC,UAAWC,EAAhB,WACE,eAAGD,UAAWC,EAAd,UAAyBuB,EAAzB,KAAiCK,MACjC,mBAAQ3B,KAAK,SAASF,UAAWC,EAAYoC,QAL5B,kBAAMvC,GAASwC,EAAAA,EAAAA,IAAcF,GAA7B,EAKjB,sBAKL,ECXYG,EAAc,WACzB,IAAMxB,GAAQE,EAAAA,EAAAA,IAAYH,GACpBD,GAASI,EAAAA,EAAAA,IAAYL,GAEvB4B,EAAgBzB,EAAMF,QAAO,SAAAU,GAAI,OACnCA,EAAKC,KAAKC,cAAcgB,SAAS5B,EADE,IAKrC,OAFA6B,QAAQC,IAAIH,IAGV,0BACE,wBACGzB,EAAM6B,OAAS,EACdJ,EAAcK,KAAI,gBAAGT,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,OAAb,OAChB,SAACM,EAAD,CAAkBC,GAAIA,EAAIZ,KAAMA,EAAMK,OAAQA,GAAhCO,EADE,KAIlB,oDAKT,E,kBCCD,EAnBiB,WACf,IAAMtC,GAAWC,EAAAA,EAAAA,MACXY,GAAYM,EAAAA,EAAAA,IAAYT,GAM9B,OAJAsC,EAAAA,EAAAA,YAAU,WACRhD,GAASiD,EAAAA,EAAAA,MACV,GAAE,CAACjD,KAGF,iCACE,SAACkD,EAAA,EAAD,6BACA,SAAChC,EAAD,KACA,SAACnB,EAAD,KACA,yBAAMc,GAAa,4BACnB,SAAC4B,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","page/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactFilter_form__RBCmO\",\"label\":\"ContactFilter_label__qRVzC\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport css from './ContactFilter.module.css';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <form className={css.form}>\n        <label className={css.label}>\n          Find contacts by name:\n          <input type=\"name\" onChange={onFilterChange}></input>\n        </label>\n      </form>\n    </div>\n  );\n};\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const items = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    items.forEach(item => {\n      if (item.name.toLowerCase() === form.elements.name.value.toLowerCase()) {\n        alert(`${form.elements.name.value} is already in contacts`);\n      } else {\n        dispatch(\n          addContact({\n            name: form.elements.name.value,\n            number: form.elements.number.value,\n          })\n        );\n        form.reset();\n      }\n    });\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label}>\n        Number\n        <input\n          type=\"text\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact'</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"text\":\"Contact_text__Wq-3f\",\"button\":\"Contact_button__F+kJb\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from './Contact.module.css';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.text}>{name}: {number}</p>\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Contact } from 'components/Contact/Contact';\n\nexport const ContactList = () => {\n  const items = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  let foundContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter)\n  );\n  console.log(foundContacts);\n\n  return (\n    <div>\n      <ul>\n        {items.length > 0 ? (\n          foundContacts.map(({ id, name, number }) => (\n            <Contact key={id} id={id} name={name} number={number} />\n          ))\n        ) : (\n          <p>Contact list is empty</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n","import { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>Your Contacts</Helmet>\n      <ContactForm />\n      <ContactFilter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactFilter","dispatch","useDispatch","className","css","type","onChange","e","setFilter","target","value","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","ContactForm","useSelector","onSubmit","preventDefault","form","currentTarget","forEach","item","name","toLowerCase","elements","alert","addContact","number","reset","autoComplete","pattern","title","required","Contact","id","onClick","deleteContact","ContactList","foundContacts","includes","console","log","length","map","useEffect","fetchContacts","Helmet"],"sourceRoot":""}