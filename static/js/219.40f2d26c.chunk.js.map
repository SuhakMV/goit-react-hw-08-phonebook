{"version":3,"file":"static/js/219.40f2d26c.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","page/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactFilter_form__RBCmO\",\"label\":\"ContactFilter_label__qRVzC\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport css from './ContactFilter.module.css';\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <form className={css.form}>\n        <label className={css.label}>\n          Find contacts by name:\n          <input type=\"name\" onChange={onFilterChange}></input>\n        </label>\n      </form>\n    </div>\n  );\n};\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n\n  const items = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  function handleChange(evt) {\n    const value = evt.target.value;\n    setState({\n      ...state,\n      [evt.target.name]: value,\n    });\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let savedName = false;\n\n    items.forEach(element => {\n      if (element.name.toLowerCase() === state.name.toLowerCase()) {\n        alert(`${state.name} is already in contacts`);\n        savedName = true;\n        setState({\n          name: '',\n          number: '',\n        });\n      }\n    });\n    if (savedName) {\n      return;\n    }\n\n    dispatch(addContact(state));\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  /* const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      addContact({\n        name: form.elements.name.value,\n        number: form.elements.number.value,\n      })\n    );\n    form.reset();\n  }; */\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        Name\n        <input\n        value={state.name}\n        onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label}>\n        Number\n        <input\n        value={state.number}\n        onChange={handleChange}\n          type=\"text\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__K-zLN\",\"text\":\"Contact_text__Wq-3f\",\"button\":\"Contact_button__F+kJb\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from './Contact.module.css';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.text}>{name}: {number}</p>\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Contact } from 'components/Contact/Contact';\n\nexport const ContactList = () => {\n  const items = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  let foundContacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <div>\n      <ul>\n        {items.length > 0 ? (\n          foundContacts.map(({ id, name, number }) => (\n            <Contact key={id} id={id} name={name} number={number} />\n          ))\n        ) : (\n          <p>Contact list is empty</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n","import { ContactFilter } from 'components/ContactFilter/ContactFilter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>Your Contacts</Helmet>\n      <ContactForm />\n      <ContactFilter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactFilter","dispatch","useDispatch","className","css","type","onChange","e","setFilter","target","value","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","ContactForm","useSelector","useState","name","number","setState","handleChange","evt","onSubmit","preventDefault","savedName","forEach","element","toLowerCase","alert","addContact","autoComplete","pattern","title","required","Contact","id","onClick","deleteContact","ContactList","foundContacts","item","includes","length","map","useEffect","fetchContacts","Helmet"],"sourceRoot":""}